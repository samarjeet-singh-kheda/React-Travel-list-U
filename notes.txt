******************** Shorthand to render a list of continuous quantities (e.g., in a drop down select field or such):-    
      We create an array an map over it


{Array.from({ length: "20" }, (_, idx) => idx + 1).map((num) => (
      <option value={num} key={num}>
        {num}
      </option>
))}

{new Array(20).fill(0).map((_, idx) => (
  <option value={idx + 1}>{idx + 1}</option>
))}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////


In a input form filed or select field, these elements maintain their own state in DOM (inside the html element itself), which we can directly access.
It makes it hard to read the values, and also leaves the state right in the DOM.
We usually keeps the state in one central place, i.e. react app, not inside the DOM.
By controlled elements, it is React that controls and owns the state of input fields and not the DOM.
We need state for that because the form data changes over time & we need to maintain our application in sync with it.

3 steps:- 
    1) We create a state   [using "useState" hook]

    2) We use that state as a value of input filed (element we want to control), OR, we force the element to always take the value of this state variable
    [it gives "React" the control of the element]

    3) We update the state variable (by using the onChange event handler, where we set the variable to the current value of the field) 
    [without it the state as well as content in input field will never update]

*************************************************************

const [description, setDescription] = useState(""); (STEP --> 01)


<input
  type="text"
  placeholder="Item..."
  value={description}          (STEP --> 02)
/>


<input
  type="text"
  placeholder="Item..."
  value={description}          
  onChange={(e) => setDescription(e.target.value)}      (STEP --> 03)
/>

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////

